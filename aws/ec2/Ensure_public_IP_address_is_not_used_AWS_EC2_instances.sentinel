import "tfplan/v2" as tfplan
import "types"
import "strings"

aws_instance = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.mode is "managed" and
		resource_changes.type is "aws_instance" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"]) 
}



EC2InstanceAssociatePublicIP = func(instances){
    EC2InstancePublicIP = []
    //print(length(instances))
    if length(instances) > 0 {
        for instances as _, instance{
            associate_public_ip_address_key = keys(instance.change.after_unknown)
            if "associate_public_ip_address" in associate_public_ip_address_key {
                if instance.change.after_unknown.associate_public_ip_address is true {
                    append(EC2InstancePublicIP,instance.name)
                    print("This instance",instance.name,"should not enable the associate_public_ip_address (default configuration)")
                }
            }
            associate_public_ip_address_key = keys(instance.change.after)
            if "associate_public_ip_address" in associate_public_ip_address_key {
                if instance.change.after.associate_public_ip_address is true {
                    append(EC2InstancePublicIP,instance.name)
                    print("This instance",instance.name,"should not enable the associate_public_ip_address")
                }
            }
        }
    }
    return length(EC2InstancePublicIP)
}

// --------------------------------------------------------
// Name:        Ensure public IP address is not used AWS EC2 instances
// Category:    EC2 Instance
// Provider:    kc/cybersec
// Resource:    aws_instance
// Check:       check aws_instance.associate_public_ip_address is 
//              not true
// --------------------------------------------------------
// check aws_instance.associate_public_ip_address is not true
// --------------------------------------------------------
main = rule{
    EC2InstanceAssociatePublicIP(aws_instance) == 0 
}