import "strings"

providers = {
	"aws": {
		"alias": "",
		"config": {
			"region": {
				"references": [
					"var.region",
				],
			},
		},
		"full_name":           "registry.terraform.io/hashicorp/aws",
		"module_address":      "",
		"name":                "aws",
		"provider_config_key": "aws",
		"version_constraint":  "",
	},
}

resources = {
	"aws_db_instance.education": {
		"address": "aws_db_instance.education",
		"config": {
			"allocated_storage": {
				"constant_value": 5,
			},
			"engine": {
				"constant_value": "postgres",
			},
			"engine_version": {
				"constant_value": "14.1",
			},
			"identifier": {
				"constant_value": "education",
			},
			"instance_class": {
				"constant_value": "db.t3.micro",
			},
			"parameter_group_name": {
				"constant_value": "testname",
			},
			"password": {
				"constant_value": "var.db_password",
			},
			"publicly_accessible": {
				"constant_value": true,
			},
			"skip_final_snapshot": {
				"constant_value": true,
			},
			"username": {
				"constant_value": "edu",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "education",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_db_instance",
	},
	"aws_elasticsearch_domain.example": {
		"address": "aws_elasticsearch_domain.example",
		"config": {
			"cluster_config": [
				{
					"instance_type": {
						"constant_value": "r4.large.elasticsearch",
					},
				},
			],
			"domain_name": {
				"constant_value": "example",
			},
			"elasticsearch_version": {
				"constant_value": "7.10",
			},
			"tags": {
				"constant_value": {
					"Domain": "TestDomain",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "example",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_elasticsearch_domain",
	},
	"aws_elb.wu-tang": {
		"address": "aws_elb.wu-tang",
		"config": {
			"availability_zones": {
				"constant_value": [
					"us-east-1a",
				],
			},
			"listener": [
				{
					"instance_port": {
						"constant_value": 443,
					},
					"instance_protocol": {
						"constant_value": "http",
					},
					"lb_port": {
						"constant_value": 443,
					},
					"lb_protocol": {
						"constant_value": "https",
					},
				},
			],
			"name": {
				"constant_value": "wu-tang",
			},
			"tags": {
				"constant_value": {
					"Name": "wu-tang",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "wu-tang",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_elb",
	},
	"aws_instance.No_metadata_instance": {
		"address": "aws_instance.No_metadata_instance",
		"config": {
			"ami": {
				"constant_value": "ami-09d56f8956ab235b3",
			},
			"instance_type": {
				"constant_value": "t2.micro",
			},
			"key_name": {
				"constant_value": "tomcat",
			},
			"subnet_id": {
				"references": [
					"aws_subnet.tf_a_new.id",
					"aws_subnet.tf_a_new",
				],
			},
		},
		"count": {
			"constant_value": "1",
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "No_metadata_instance",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_instance",
	},
	"aws_instance.correct_instance": {
		"address": "aws_instance.correct_instance",
		"config": {
			"ami": {
				"constant_value": "ami-09d56f8956ab235b3",
			},
			"instance_type": {
				"constant_value": "t2.micro",
			},
			"key_name": {
				"constant_value": "tomcat",
			},
			"metadata_options": [
				{
					"http_endpoint": {
						"constant_value": "enabled",
					},
					"http_put_response_hop_limit": {
						"constant_value": 5,
					},
					"http_tokens": {
						"constant_value": "required",
					},
					"instance_metadata_tags": {
						"constant_value": "enabled",
					},
				},
			],
			"subnet_id": {
				"references": [
					"aws_subnet.tf_a_new.id",
					"aws_subnet.tf_a_new",
				],
			},
		},
		"count": {
			"constant_value": "1",
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "correct_instance",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_instance",
	},
	"aws_instance.missed_file_instance": {
		"address": "aws_instance.missed_file_instance",
		"config": {
			"ami": {
				"constant_value": "ami-09d56f8956ab235b3",
			},
			"instance_type": {
				"constant_value": "t2.micro",
			},
			"key_name": {
				"constant_value": "tomcat",
			},
			"metadata_options": [
				{
					"http_endpoint": {
						"constant_value": "enabled",
					},
					"http_put_response_hop_limit": {
						"constant_value": 5,
					},
					"instance_metadata_tags": {
						"constant_value": "enabled",
					},
				},
			],
			"subnet_id": {
				"references": [
					"aws_subnet.tf_a_new.id",
					"aws_subnet.tf_a_new",
				],
			},
		},
		"count": {
			"constant_value": "1",
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "missed_file_instance",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_instance",
	},
	"aws_load_balancer_policy.wu-tang-ssl": {
		"address": "aws_load_balancer_policy.wu-tang-ssl",
		"config": {
			"load_balancer_name": {
				"references": [
					"aws_elb.wu-tang.name",
					"aws_elb.wu-tang",
				],
			},
			"policy_attribute": [
				{
					"name": {
						"constant_value": "ECDHE-ECDSA-AES128-GCM-SHA256",
					},
					"value": {
						"constant_value": "true",
					},
				},
				{
					"name": {
						"constant_value": "Protocol-TLSv1.2",
					},
					"value": {
						"constant_value": "true",
					},
				},
			],
			"policy_name": {
				"constant_value": "wu-tang-ssl",
			},
			"policy_type_name": {
				"constant_value": "SSLNegotiationPolicyType",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "wu-tang-ssl",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_load_balancer_policy",
	},
	"aws_network_acl.tf_nacl": {
		"address": "aws_network_acl.tf_nacl",
		"config": {
			"egress": {
				"constant_value": [
					{
						"action":          "allow",
						"cidr_block":      "10.3.0.0/18",
						"from_port":       443,
						"icmp_code":       null,
						"icmp_type":       null,
						"ipv6_cidr_block": null,
						"protocol":        "tcp",
						"rule_no":         200,
						"to_port":         443,
					},
				],
			},
			"ingress": {
				"constant_value": [
					{
						"action":          "allow",
						"cidr_block":      "10.3.0.0/18",
						"from_port":       80,
						"icmp_code":       null,
						"icmp_type":       null,
						"ipv6_cidr_block": null,
						"protocol":        "tcp",
						"rule_no":         100,
						"to_port":         80,
					},
				],
			},
			"tags": {
				"constant_value": {
					"Name": "main",
				},
			},
			"vpc_id": {
				"references": [
					"aws_vpc.tf_vpc2.id",
					"aws_vpc.tf_vpc2",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "tf_nacl",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"aws_security_group.sentinel_22_added_sg": {
		"address": "aws_security_group.sentinel_22_added_sg",
		"config": {
			"description": {
				"constant_value": "sentinel_22_added_sg",
			},
			"egress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"0.0.0.0/0",
						],
						"description":      null,
						"from_port":        0,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "-1",
						"security_groups":  null,
						"self":             null,
						"to_port":          0,
					},
				],
			},
			"ingress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"10.3.0.0/16",
						],
						"description":      null,
						"from_port":        22,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             true,
						"to_port":          22,
					},
					{
						"cidr_blocks": [
							"10.3.0.0/16",
						],
						"description":      null,
						"from_port":        100,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "-1",
						"security_groups":  null,
						"self":             true,
						"to_port":          100,
					},
				],
			},
			"name": {
				"constant_value": "sentinel_22_added_sg",
			},
			"tags": {
				"constant_value": {
					"Name":          "sentinel_22_added_sg",
					"business-line": "test",
				},
			},
			"vpc_id": {
				"references": [
					"aws_vpc.tf_vpc2.id",
					"aws_vpc.tf_vpc2",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "sentinel_22_added_sg",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"aws_security_group.tf_test": {
		"address": "aws_security_group.tf_test",
		"config": {
			"description": {
				"constant_value": "Common endpoints security group.",
			},
			"egress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"0.0.0.0/0",
						],
						"description":      null,
						"from_port":        0,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "-1",
						"security_groups":  null,
						"self":             null,
						"to_port":          0,
					},
				],
			},
			"ingress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"0.0.0.0/0",
						],
						"description":      null,
						"from_port":        22,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             true,
						"to_port":          22,
					},
					{
						"cidr_blocks": [
							"10.0.0.0/16",
						],
						"description":      null,
						"from_port":        80,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             true,
						"to_port":          80,
					},
					{
						"cidr_blocks": [
							"10.2.0.0/16",
						],
						"description":      null,
						"from_port":        22,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             true,
						"to_port":          22,
					},
				],
			},
			"name": {
				"constant_value": "endpoint_shared",
			},
			"tags": {
				"constant_value": {
					"Name":          "endpoint_shared",
					"business-line": "test",
				},
			},
			"vpc_id": {
				"references": [
					"aws_vpc.tf_vpc2.id",
					"aws_vpc.tf_vpc2",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "tf_test",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"aws_security_group_rule.just_test": {
		"address": "aws_security_group_rule.just_test",
		"config": {
			"cidr_blocks": {
				"constant_value": [
					"0.0.0.0/0",
					"10.3.0.0/24",
				],
			},
			"from_port": {
				"constant_value": 161,
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"aws_security_group.sentinel_22_added_sg.id",
					"aws_security_group.sentinel_22_added_sg",
				],
			},
			"to_port": {
				"constant_value": 161,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "just_test",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"aws_subnet.tf_a_new": {
		"address": "aws_subnet.tf_a_new",
		"config": {
			"availability_zone": {
				"constant_value": "ap-east-1c",
			},
			"cidr_block": {
				"constant_value": "10.222.11.0/24",
			},
			"map_public_ip_on_launch": {
				"constant_value": false,
			},
			"tags": {
				"constant_value": {
					"Name": "tf_a_new_one",
				},
			},
			"vpc_id": {
				"references": [
					"aws_vpc.tf_vpc2.id",
					"aws_vpc.tf_vpc2",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "tf_a_new",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"aws_subnet.tf_a_new_one": {
		"address": "aws_subnet.tf_a_new_one",
		"config": {
			"availability_zone": {
				"constant_value": "ap-east-1c",
			},
			"cidr_block": {
				"constant_value": "10.222.10.0/26",
			},
			"map_public_ip_on_launch": {
				"constant_value": false,
			},
			"tags": {
				"constant_value": {
					"Name": "tf_a_new_one",
				},
			},
			"vpc_id": {
				"references": [
					"aws_vpc.tf_vpc2.id",
					"aws_vpc.tf_vpc2",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "tf_a_new_one",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"aws_vpc.tf_vpc2": {
		"address": "aws_vpc.tf_vpc2",
		"config": {
			"cidr_block": {
				"constant_value": "10.222.0.0/16",
			},
			"enable_dns_hostnames": {
				"constant_value": true,
			},
			"enable_dns_support": {
				"constant_value": true,
			},
			"tags": {
				"constant_value": {
					"Name": "tf_test",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "tf_vpc2",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_vpc",
	},
}

provisioners = {}

variables = {
	"aws": {
		"default":        "ap-east-1",
		"description":    "",
		"module_address": "",
		"name":           "aws",
	},
	"aws_region": {
		"default":        "ap-east-1",
		"description":    "",
		"module_address": "",
		"name":           "aws_region",
	},
	"region": {
		"default":        "ap-east-1",
		"description":    "",
		"module_address": "",
		"name":           "region",
	},
}

outputs = {}

module_calls = {}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
