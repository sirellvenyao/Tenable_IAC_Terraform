import "tfplan/v2" as tfplan
//import "strings"



aws_security_groups = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.mode is "managed" and
		resource_changes.type is "aws_security_group" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"]) and
		(resource_changes.change.after.ingress else []) is not empty
}

aws_security_group_rules = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.mode is "managed" and
		resource_changes.type is "aws_security_group_rule" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"]) and
		resource_changes.change.after.type is "ingress"
}


NetworkSecurityGroupPortCompliance = func(groups) {
	mapSecurityRules = []
    if length(groups) > 0 {   
        //print(groups)
        for groups as _, group {
            securitygroupname = group.change.after.name
            for group.change.after.ingress as sgr {
                for (sgr.cidr_blocks) as address {
                    if address matches ".*" {
                        print(address)
                    }
                }
            }
        }
        //print("NonCompliant security_group is: ",mapSecurityRules)
        //print("NonCompliant security_group count is: ", length(mapSecurityRules))
        return 1
    }

}





// --------------------------------------------------------
// Name:        Ensure_(tcp_25)_Security_Groups_do_not_have_unrestricted_specific_ports_open_SNMP.sentinel
// Category:    Networking
// Provider:    kc/cybersec
// Resource:    aws_security_group
//              aws_security_group_rule
// Check:       cidr_blocks does not contain "0.0.0.0/0"
//              when port is "25" or protocl is "-1,tcp"
// --------------------------------------------------------
// Ensure no security groups allow ingress from 0.0.0.0/0
// to port tcp25.
// --------------------------------------------------------



main = rule {
	NetworkSecurityGroupPortCompliance(aws_security_groups) == 0 

}