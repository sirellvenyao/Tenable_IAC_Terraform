import "strings"

providers = {
	"aws": {
		"alias": "",
		"config": {
			"region": {
				"references": [
					"var.region",
				],
			},
		},
		"full_name":           "registry.terraform.io/hashicorp/aws",
		"module_address":      "",
		"name":                "aws",
		"provider_config_key": "aws",
		"version_constraint":  "",
	},
}

resources = {
	"aws_iam_access_key.lb": {
		"address": "aws_iam_access_key.lb",
		"config": {
			"user": {
				"references": [
					"aws_iam_user.lb.name",
					"aws_iam_user.lb",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "lb",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_access_key",
	},
	"aws_iam_group.group": {
		"address": "aws_iam_group.group",
		"config": {
			"name": {
				"constant_value": "test-group",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "group",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_group",
	},
	"aws_iam_group_policy_attachment.test-attach": {
		"address": "aws_iam_group_policy_attachment.test-attach",
		"config": {
			"group": {
				"references": [
					"aws_iam_group.group.name",
					"aws_iam_group.group",
				],
			},
			"policy_arn": {
				"constant_value": "arn:aws:iam::aws:policy/AdministratorAccess",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "test-attach",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_group_policy_attachment",
	},
	"aws_iam_policy.policy123OOL": {
		"address": "aws_iam_policy.policy123OOL",
		"config": {
			"description": {
				"constant_value": "My test policy",
			},
			"name": {
				"constant_value": "test_policy",
			},
			"path": {
				"constant_value": "/",
			},
			"policy": {
				"constant_value": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "policy123OOL",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_policy",
	},
	"aws_iam_policy.policy_one": {
		"address": "aws_iam_policy.policy_one",
		"config": {
			"name": {
				"constant_value": "policy-618033",
			},
			"policy": {
				"constant_value": null,
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "policy_one",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_policy",
	},
	"aws_iam_policy.policy_two": {
		"address": "aws_iam_policy.policy_two",
		"config": {
			"name": {
				"constant_value": "policy-381966",
			},
			"policy": {
				"constant_value": null,
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "policy_two",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_policy",
	},
	"aws_iam_role.adsdata": {
		"address": "aws_iam_role.adsdata",
		"config": {
			"assume_role_policy": {
				"references": [
					"data.aws_iam_policy_document.instance_assume_role_policy_jason.json",
					"data.aws_iam_policy_document.instance_assume_role_policy_jason",
				],
			},
			"inline_policy": [
				{
					"name": {
						"constant_value": "my_inline_policy",
					},
					"policy": {
						"constant_value": null,
					},
				},
				{
					"name": {
						"constant_value": "policy-8675309",
					},
					"policy": {
						"references": [
							"data.aws_iam_policy_document.inline_policy.json",
							"data.aws_iam_policy_document.inline_policy",
						],
					},
				},
			],
			"name": {
				"constant_value": "yak_role",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "adsdata",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"aws_iam_role.example": {
		"address": "aws_iam_role.example",
		"config": {
			"assume_role_policy": {
				"references": [
					"data.aws_iam_policy_document.instance_assume_role_policy.json",
					"data.aws_iam_policy_document.instance_assume_role_policy",
				],
			},
			"managed_policy_arns": {
				"constant_value": [
					"arn:aws:iam::aws:policy/AdministratorAccess",
				],
			},
			"name": {
				"constant_value": "yak_role",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "example",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"aws_iam_role.jsonencode": {
		"address": "aws_iam_role.jsonencode",
		"config": {
			"assume_role_policy": {
				"constant_value": null,
			},
			"name": {
				"constant_value": "jsonencode",
			},
			"tags": {
				"constant_value": {
					"tag-key": "tag-value",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "jsonencode",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"aws_iam_role.test_role": {
		"address": "aws_iam_role.test_role",
		"config": {
			"assume_role_policy": {
				"constant_value": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n",
			},
			"name": {
				"constant_value": "test_role",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "test_role",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"aws_iam_role_policy.test_policy": {
		"address": "aws_iam_role_policy.test_policy",
		"config": {
			"name": {
				"constant_value": "test_policy",
			},
			"policy": {
				"constant_value": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n",
			},
			"role": {
				"references": [
					"aws_iam_role.test_role.id",
					"aws_iam_role.test_role",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "test_policy",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy",
	},
	"aws_iam_user.lb": {
		"address": "aws_iam_user.lb",
		"config": {
			"name": {
				"constant_value": "loadbalancer",
			},
			"path": {
				"constant_value": "/system/",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "lb",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_user",
	},
	"aws_iam_user_policy.lb_ro": {
		"address": "aws_iam_user_policy.lb_ro",
		"config": {
			"name": {
				"constant_value": "test",
			},
			"policy": {
				"constant_value": null,
			},
			"user": {
				"references": [
					"aws_iam_user.lb.name",
					"aws_iam_user.lb",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "lb_ro",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_user_policy",
	},
	"aws_lambda_function.test_lambda": {
		"address": "aws_lambda_function.test_lambda",
		"config": {
			"environment": [
				{
					"variables": {
						"constant_value": {
							"foo": "bar",
						},
					},
				},
			],
			"filename": {
				"constant_value": "lambda_function_payload.zip",
			},
			"function_name": {
				"constant_value": "lambda_function_name",
			},
			"handler": {
				"constant_value": "index.test",
			},
			"role": {
				"references": [
					"aws_iam_role.example.arn",
					"aws_iam_role.example",
				],
			},
			"runtime": {
				"constant_value": "nodejs18.x",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "test_lambda",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_lambda_function",
	},
	"aws_lambda_function.test_lambda_2": {
		"address": "aws_lambda_function.test_lambda_2",
		"config": {
			"filename": {
				"constant_value": "lambda_function_payload.zip",
			},
			"function_name": {
				"constant_value": "lambda_function_name",
			},
			"handler": {
				"constant_value": "index.test",
			},
			"role": {
				"references": [
					"aws_iam_role.example.arn",
					"aws_iam_role.example",
				],
			},
			"runtime": {
				"constant_value": "nodejs18.x",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "test_lambda_2",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_lambda_function",
	},
	"aws_s3_bucket.Ellventestssakvnkasicsk19230dklsc": {
		"address": "aws_s3_bucket.Ellventestssakvnkasicsk19230dklsc",
		"config": {
			"bucket": {
				"constant_value": "Ellventestssakvnkasicsk19230dklsc",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "Ellventestssakvnkasicsk19230dklsc",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket",
	},
	"aws_s3_bucket.mytestssakvnkasicsk19230dklsc": {
		"address": "aws_s3_bucket.mytestssakvnkasicsk19230dklsc",
		"config": {
			"bucket": {
				"constant_value": "mytestssakvnkasicsk19230dklsc",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "mytestssakvnkasicsk19230dklsc",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket",
	},
	"aws_s3_bucket_policy.Ellventestssakvnkasicsk19230dklsc": {
		"address": "aws_s3_bucket_policy.Ellventestssakvnkasicsk19230dklsc",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.Ellventestssakvnkasicsk19230dklsc.id",
					"aws_s3_bucket.Ellventestssakvnkasicsk19230dklsc",
				],
			},
			"policy": {
				"constant_value": "{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"S3-Console-Auto-Gen-Policy-1670678796275\",\n    \"Statement\": [\n        {\n            \"Sid\": \"S3PolicyStmt-DO-NOT-MODIFY-1670678792895\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"arn:aws:iam::891189580005:root\",\n                    \"arn:aws:iam::875537689616:root\",\n                    \"arn:aws:iam::555625778301:root\"\n                ]\n            },\n            \"Action\": [\n                \"s3:GetBucketVersioning\",\n                \"s3:PutBucketVersioning\",\n                \"s3:ReplicateObject\",\n                \"s3:ReplicateDelete\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::kucoin-cloudtrail-central\",\n                \"arn:aws:s3:::kucoin-cloudtrail-central/*\"\n            ]\n        },\n        {\n            \"Sid\": \"AWSCloudTrailAclCheck20131101\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:GetBucketAcl\",\n            \"Resource\": \"arn:aws:s3:::kucoin-cloudtrail-central\"\n        },\n        {\n            \"Sid\": \"AWSCloudTrailWrite20131101\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:PutObject\",\n            \"Resource\": [\n                \"arn:aws:s3:::kucoin-cloudtrail-central/write/AWSLogs/*\",\n                \"arn:aws:s3:::kucoin-cloudtrail-central/read/AWSLogs/*\"\n            ],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:SourceArn\": [\n                        \"arn:aws:cloudtrail:ap-northeast-1:875537689616:trail/management-events-write-875537689616\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:875537689616:trail/management-events-read-875537689616\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:555625778301:trail/management-events-write-555625778301\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:555625778301:trail/management-events-read-555625778301\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:891189580005:trail/management-events-write-891189580005\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:891189580005:trail/management-events-read-891189580005\"\n                    ],\n                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"\n                }\n            }\n        },\n        {\n            \"Sid\": \"AWSCloudTrailS3Write20131101\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:PutObject\",\n            \"Resource\": [\n                \"arn:aws:s3:::kucoin-cloudtrail-central/s3write/AWSLogs/*\",\n                \"arn:aws:s3:::kucoin-cloudtrail-central/s3read/AWSLogs/*\"\n            ],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:SourceArn\": [\n                        \"arn:aws:cloudtrail:ap-northeast-1:875537689616:trail/s3-events-write-875537689616\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:875537689616:trail/s3-events-read-875537689616\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:555625778301:trail/s3-events-write-555625778301\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:555625778301:trail/s3-events-read-555625778301\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:891189580005:trail/s3-events-write-891189580005\",\n                        \"arn:aws:cloudtrail:ap-northeast-1:891189580005:trail/s3-events-read-891189580005\"\n                    ],\n                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"\n                }\n            }\n        },\n        {\n            \"Sid\": \"AWSCloudTrailReadOnly20230506\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::892535148939:role/arron\"\n            },\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::kucoin-cloudtrail-central\",\n                \"arn:aws:s3:::kucoin-cloudtrail-central/*\"\n            ]\n        }\n    ]\n}\n",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "Ellventestssakvnkasicsk19230dklsc",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_policy",
	},
	"aws_s3_bucket_policy.mytestssakvnkasicsk19230dklsc": {
		"address": "aws_s3_bucket_policy.mytestssakvnkasicsk19230dklsc",
		"config": {
			"bucket": {
				"references": [
					"aws_s3_bucket.mytestssakvnkasicsk19230dklsc.id",
					"aws_s3_bucket.mytestssakvnkasicsk19230dklsc",
				],
			},
			"policy": {
				"constant_value": "{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"MYBUCKETPOLICY\",\n  \"Statement\": [\n    {\n      \"Sid\": \"IPAllow\",\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": [\n        \"s3:GetBucketVersioning\",\n        \"s3:PutBucketVersioning\",\n        \"s3:ReplicateObject\",\n        \"s3:ReplicateDelete\"\n      ],\n      \"Resource\": \"arn:aws:s3:::mytestssakvnkasicsk19230dklsc/*\",\n      \"Condition\": {\n         \"IpAddress\": {\"aws:SourceIp\": \"8.8.8.8/32\"}\n      }\n    }\n  ]\n}\n",
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "mytestssakvnkasicsk19230dklsc",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_policy",
	},
	"data.aws_iam_policy_document.inline_policy": {
		"address": "data.aws_iam_policy_document.inline_policy",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"ec2:DescribeAccountAttributes",
						],
					},
					"resources": {
						"constant_value": [
							"*",
						],
					},
				},
			],
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "inline_policy",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"data.aws_iam_policy_document.instance_assume_role_policy": {
		"address": "data.aws_iam_policy_document.instance_assume_role_policy",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"sts:AssumeRole",
						],
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"ec2.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
				},
			],
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "instance_assume_role_policy",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"data.aws_iam_policy_document.instance_assume_role_policy_jason": {
		"address": "data.aws_iam_policy_document.instance_assume_role_policy_jason",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"sts:AssumeRole",
						],
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"ec2.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
				},
			],
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "instance_assume_role_policy_jason",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
}

provisioners = {}

variables = {
	"aws": {
		"default":        "ap-east-1",
		"description":    "",
		"module_address": "",
		"name":           "aws",
	},
	"aws_region": {
		"default":        "ap-east-1",
		"description":    "",
		"module_address": "",
		"name":           "aws_region",
	},
	"awsvpc_service_subnetids": {
		"default":        [],
		"description":    "List of subnet ids to which a service is deployed in fargate mode.",
		"module_address": "",
		"name":           "awsvpc_service_subnetids",
	},
	"region": {
		"default":        "ap-east-1",
		"description":    "",
		"module_address": "",
		"name":           "region",
	},
}

outputs = {}

module_calls = {}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
